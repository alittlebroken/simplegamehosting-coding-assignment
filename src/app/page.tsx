"use client";
import { useEffect, useState, FC } from "react";
import { CiGlobe } from "react-icons/ci";
import { HiStatusOnline, HiStatusOffline } from "react-icons/hi";

/*
  Welcome to the simplegamehosting coding assignment!

  if you got this far great job! ðŸŽ‰
  Now it's your turn to shine! ðŸŒŸ
  
  The mock data is fetched from the server and displayed on the page.

  Your task is to create a dynamic card component for each server in the list.
  - The card should display the server's name, game, players, status, version etc, bonus points for displaying any extra data from the json response.
  - please use tailwind to style your components, you can use the existing styles in this file as a reference.
  - You can also use any other libraries you like to help you build the UI.
  
  for extra info please read the README.md file in the root of the project.
*/

/* Individual type for the data representing a game server */
interface GameServer {
  id: number;
  name: string;
  game: string;
  players: string;
  status: string;
  version: string;
  type: string;
  region: string;
  mods: string[]
}

/* Type for the data passed into the server list component */
interface GameServerListProps {
  title: string;
  data: GameServer[];
}

/* Type for the data passed into the card component for displaying the actual server content */
interface GameServerProps {
  server: GameServer;
}

/* Component card for displaying all relevant data about a server */
const GameServer: FC<GameServerProps> = ({server}) => {

  /* State for controlling if the server is online or offline */
  const [serverOnline, setServerOnline] = useState(server.status || "offline");

  /* Handler for toggling the server state on and offline */
  const handleServerStatus = (e) => {
    /* Stop the default behaviour of the button */
    e.preventDefault()

    /* Update the server status */
    setServerOnline(serverOnline === "offline" ? "online" : "offline");
  }

  return (
    <section className="flex flex-col gap-2 bg-white rounded-md p-2 shadow-lg border-2 border-white dark:bg-sky-700 hover:border-2 hover:border-dash hover:border-slate-400">

        <h2 className="text-3xl font-bold text-center text-purple-800 sm:text-2xl md:text-3xl">{server.name}</h2>


      <div id="cardBody" className="flex flex-col gap-2">
        
        <div>

          <div className="flex flex-col gap-3 p-1">
            <div className="w-100 text-center text-sm pb-3">
              <span className="text-bold">Players online: </span>{server.players}
            </div>
          </div>

          <div className="flex justify-between text-sm content-center">
            
            <div className="flex gap-2 content-center justify-center ">
                <span className="w-12 p-0 m-0 flex content-center justify-center">
                  {serverOnline === "online" ? (<HiStatusOnline className="text-2xl text-green-600 my-auto" title={`Status: ${serverOnline}`} />) : (<HiStatusOffline className="text-2xl text-red-600 my-auto" title={`Status: ${serverOnline}`}/>)}
                </span>
                <span className="text-sm content-center">{serverOnline}</span>
            </div>

            <button onClick={handleServerStatus} className="rounded-lg p-2 bg-slate-300 text-slate-600 text-bold shadow-md hover:bg-slate-600 hover:text-slate-300 hover:shadow-lg">
              {serverOnline === "online" ? "Stop Server" : "Start Server"}
            </button>
          
          </div>
        </div>
        
        <div>
          <span className="text-bold text-slate-600">Mods:</span>
          <ul className="bg-slate-100 rounded-md p-2 text-sm shadow-inner h-28 overflow-y-auto">
            {server.mods.map(mod => (<li>{mod}</li>))}
          </ul>
        </div>
      </div>

      <div id="cardFooter" className="flex gap-5 justify-between border-t-2 pt-2 text-sm">
        <div>{server.game} v{server.version}</div>
        <div>{server.type}</div>
        <div><CiGlobe className="text-xl" title={`Region: ${server.region}`} /></div>
      </div>

    </section>
  );
}


/* Container component for a list of Game server cards generated by the JSON array passed to it */
const GameServerList: FC<GameServerListProps> = ({data, title}) => {

  return (
    <>
    <h1 className="text-2xl font-bold text-purple-800 sm:text-4xl dark:text-sky-200">{title}</h1>
      <main className="grid grid-cols-1 row-start-2 gap-5 bg-slate-300 dark:bg-sky-950 p-3 rounded-lg text-slate-500 dark:text-sky-200 sm:grid-cols-2 md:grid-cols-3">
        {data.map(item => {
          return (
            <GameServer server={item} key={item.id} />
          )
        })}
      
      </main>
    </>
  );

}

export default function Home() {
  const [serverData, setServerData] = useState(null);
  // you can update this fetching code if required but it's not necessary for the assignment.
  useEffect(() => {
    const fetchServerData = async () => {
      try {
        const response = await fetch("/api/mock");
        const data = await response.json();
        setServerData(data);
      } catch (error) {
        console.error("Failed to fetch server data:", error);
      }
    };

    fetchServerData();
  }, []);

  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-10 font-[family-name:var(--font-geist-sans)]">
      {serverData ? (<GameServerList title="Minecraft Server List" data={serverData} />) : "Loading..."}
    </div>
  );
}
